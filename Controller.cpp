#include "Controller.h"

// -------------------- [ Controller YapÄ±cÄ±sÄ±: BaÅŸlangÄ±Ã§ DeÄŸerleri ve Timer AyarÄ± ] --------------------

// Controller sÄ±nÄ±fÄ±nÄ±n yapÄ±cÄ± fonksiyonu (constructor)
// BaÅŸlangÄ±Ã§ta x ve y konumlarÄ±nÄ± belirler, hÄ±z ve sÄ±nÄ±rlarÄ± tanÄ±mlar
Controller::Controller(QObject* parent)
    : m_x(1315 / 2 - 50),  // BaÅŸlangÄ±Ã§ x konumu: ekranÄ±n ortasÄ± (1315px geniÅŸlikte, 50px nesne ortalanÄ±r)
    m_y(685 - 50),       // BaÅŸlangÄ±Ã§ y konumu: ekranÄ±n alt kÄ±smÄ±na yakÄ±n (Ã¶rnek: 685px yÃ¼kseklik - 50px)
    xSpeed(10),          // Her tuÅŸla 10 piksel yatay kayma
    minX(0),             // x ekseninde minimum sÄ±nÄ±r (sol kenar)
    maxX(1315),          // x ekseninde maksimum sÄ±nÄ±r (saÄŸ kenar)
    bottomY(685 - 50)    // y ekseninde maksimum sÄ±nÄ±r (nesne zeminden aÅŸaÄŸÄ± inmesin diye)
{
    // -------------------- [ ZamanlayÄ±cÄ± (QTimer) ile Fizik GÃ¼ncelleyici Kurulumu ] --------------------

    // QTimer sinyali timeout olduÄŸunda (her 16ms'de bir), updateState() fonksiyonu tetiklenir
    connect(&time, &QTimer::timeout, this, &Controller::updateState);

    // ZamanlayÄ±cÄ±yÄ± baÅŸlat: 16ms aralÄ±kla Ã§alÄ±ÅŸacak ÅŸekilde ayarlandÄ± (yaklaÅŸÄ±k 60 FPS)
    time.start(16);

    // -------------------- [ /QTimer Kurulumu ] --------------------
}


// -------------------- [ Nesneyi Sola Hareket Ettirme Fonksiyonu ] --------------------
// Nesneyi sola hareket ettirir ve sol sÄ±nÄ±rÄ± aÅŸmasÄ±nÄ± engeller
void Controller::moveLeft()
{
    setX(m_x - xSpeed); // Nesneyi sola doÄŸru xSpeed (10) kadar kaydÄ±r
    if(m_x < minX) // EÄŸer konum min sÄ±nÄ±rdan daha kÃ¼Ã§Ã¼kse
    {
        setX(minX); // Nesneyi min sÄ±nÄ±r olan 0'a sabitle
    }
}
// -------------------- [ /moveLeft ] --------------------


// -------------------- [ Nesneyi SaÄŸa Hareket Ettirme Fonksiyonu ] --------------------
// Nesneyi saÄŸa hareket ettirir ve saÄŸ sÄ±nÄ±rÄ± aÅŸmasÄ±nÄ± engeller
void Controller::moveRight()
{
    setX(m_x + xSpeed); // Nesneyi saÄŸa doÄŸru xSpeed (10) kadar kaydÄ±r
    if(m_x > maxX) // EÄŸer konum max sÄ±nÄ±rÄ± aÅŸarsa
    {
        setX(maxX); // Nesneyi max sÄ±nÄ±r olan 1366'ya sabitle
    }
}
// -------------------- [ /moveRight ] --------------------


// -------------------- [ YukarÄ± Thrust Uygulama Fonksiyonu ] --------------------
// YukarÄ± hareket iÃ§in anlÄ±k thrust (itme) uygular
void Controller::applyThrust()
{
    ySpeed = maxThrust;  // ySpeed deÄŸerine anlÄ±k negatif hÄ±z atanÄ±r (Ã¶rneÄŸin -15)
    // Bu, bir sonraki updateState Ã§aÄŸrÄ±sÄ±nda nesnenin yukarÄ± hareket etmesine neden olur.
    if(m_y < bottomY/1.5) // Nesne, belirlenen Ã¼st sÄ±nÄ±rÄ±n (bottomY'nin 1/1.5â€™i kadar yukarÄ±sÄ±) Ã¼stÃ¼ne Ã§Ä±ktÄ±ysa
    {
        ySpeed = 0; // yukarÄ± hareket durdurulur, bÃ¶ylece nesne ekrandan Ã§Ä±kmaz.
    }
}
// -------------------- [ /applyThrust ] --------------------


// -------------------- [ YerÃ§ekimi & Thrust GÃ¼ncelleyici ZamanlayÄ±cÄ± Slot ] --------------------
// Nesnenin dÃ¼ÅŸme ve yukarÄ± zÄ±plama hareketlerini gÃ¼nceller; yerÃ§ekimi ve thrust etkisini uygular
void Controller::updateState()
{
    m_y += ySpeed;         // Y konumu mevcut ySpeed kadar deÄŸiÅŸtirilir (yukarÄ±/ÅŸaÄŸÄ± hareket)
    ySpeed += gravity;     // ySpeed deÄŸerine yerÃ§ekimi eklenir (her seferde biraz daha aÅŸaÄŸÄ± Ã§eker)

    if (m_y > bottomY)     // EÄŸer nesne alt sÄ±nÄ±rdan aÅŸaÄŸÄ±ya dÃ¼ÅŸerse
    {
        m_y = bottomY;     // Y konumu alt sÄ±nÄ±r deÄŸeri olan bottomY'ye sabitlenir (Ã¶rneÄŸin zemin)
    }

    emit yChanged();       // y konumu deÄŸiÅŸtiÄŸi iÃ§in QML'e deÄŸiÅŸiklik bildirimi gÃ¶nderilir
}
// -------------------- [ /updateState ] --------------------


// -------------------- [ /Controller YapÄ±cÄ±sÄ± ] --------------------




// --------------------------------------------------------------------------------------------------
// ğŸ§  Controller SÄ±nÄ±fÄ± MantÄ±ÄŸÄ±:
// Bu sÄ±nÄ±f, ekrandaki bir nesnenin (Ã¶rneÄŸin bir karakter veya araÃ§) konumunu ve hareketini kontrol eder.
// - BaÅŸlangÄ±Ã§ta konum, hÄ±z ve sÄ±nÄ±r deÄŸerleri tanÄ±mlanÄ±r.
// - QTimer ile her 16 milisaniyede bir updateState() fonksiyonu Ã§aÄŸrÄ±larak,
//   yerÃ§ekimi ve thrust (itme kuvveti) gibi fiziksel etkiler simÃ¼le edilir.
// - Bu yapÄ±, 60 FPS'e yakÄ±n bir gÃ¼ncelleme saÄŸlar ve oyun mekaniÄŸi oluÅŸturmak iÃ§in kullanÄ±lÄ±r.
// --------------------------------------------------------------------------------------------------
